$(function(){	var $styleTarget={};	var initialElementStyles='';	var newElementStyles='';		var cssProperties =['id',						'background-color','class','position','overflow',						'float','clear','margin','padding',						'border','width','height','border'];			var selectListAttributes = ['position','overflow','float','clear'];		var storedAttributes = ['margin','padding','border'];		var basicAttrs = ['id','class'];		var hiddenSiblings = false;	$('.customizer input[name="backgroundColor"]').live('click',function(event){						if(hiddenSiblings==false){			$(this).parents('li').siblings().hide();			hiddenSiblings=true;			console.log('hiding siblig');			$('.dezyner').dialog('option','width',620).dialog('option','height',400);;		}		else{			$(this).parents('li').siblings().show();			hiddenSiblings=false;			$('.dezyner').dialog('option','width','290px').dialog('option','height','auto');		}						colorPicker(event,undefined, undefined, undefined, false);	});		$('.header-panel .banner').click(function(event){		//colorPicker(event);		//event.preventDefault();	});		//Associate the dialogs for the designer panels	/*$('.dezyner').dialog(		{ 	autoOpen: false ,			position:[0,50],			width:320,			open:initializeParams		});	*/		$('.dezyner').dialog(		{ 	autoOpen: false ,			width:290,			open:initializeParams		});	$('.css-properties').dialog({ autoOpen: false });			function initializeParams(event, ui){			}		$('.wrapper div, .footer, .footer div').hover(function(){		$(this).addClass('customize-selector');	},	function(){		$(this).removeClass('customize-selector');	});		function init($target){		$styleTarget = $target;		initialElementStyles=$styleTarget.attr('style');				//These three properties are saved separately because jQuery cannot extract them directly		//initialElementStyles += 'margin:'+$styleTarget.data('margin') +";";		//initialElementStyles += 'padding:'+$styleTarget.data('padding')+";";		//initialElementStyles += 'border:'+$styleTarget.data('border')+";";				console.log("initialElementStyles : " + initialElementStyles);	}		$('.wrapper div, .footer, .footer div').bind('click',function(event){		resetDezyner('.selection-panel-1');				//Save the initial state of the element so that it can be restored in case the user chooses to cancel		//the styling operation.		init($(event.target));				$( ".dezyner").dialog('open').dialog('option','title','Choose A Task');		event.stopPropagation();	}).css({'cursor':'pointer'});				function resetDezyner(selector){		$(selector).css({'display':'block'}).siblings().css({'display':'none'});				//console.log($('.selection-panel-1').siblings().size());	}			function setupCurrentProperties($propertyContainer){				$('.options li',$propertyContainer).each(function(key,attrDetails){								var attrName = $('.attr-name',attrDetails).html();			var $valueHolder= $('.values',attrDetails).children();						//console.log("setupCurrentProperties : "+attrName);									//If it is a basic attribute			if($.inArray(attrName,basicAttrs)>-1){				$valueHolder.val($styleTarget.attr(attrName));			}			else{				//If it is one of the attributes for which we use a select list				if($.inArray(attrName,selectListAttributes)>-1){					$( ".dezyner").dialog('option','title','Current Values');					console.log("Select list attr : " + attrName + ' value : ' + $styleTarget.css(attrName));					$('option',$valueHolder)						.removeAttr('selected')						.each(function(){							if($(this).html()==$styleTarget.css(attrName)){								$(this).attr('selected','selected');							}						});					}				else{										if($.inArray(attrName,storedAttributes)>-1){						//console.log('Retrieving stored for ' + attrName);						//console.log('Retrieving stored Val' + $styleTarget.data(attrName));						$valueHolder.val($styleTarget.data(attrName));					}					else{						$valueHolder.val($styleTarget.css(attrName));					}									}							}												/*			if( $valueHolder[0].tagName =="SELECT"){				//If it is a select ,then get the selected value				//console.log($valueHolder.find("option:selected").html());			}			else{								if($.inArray(attrName,storedAttributes)>-1){					console.log('Retrieving stored for ' + attrName);					console.log('Retrieving stored Val' + $styleTarget.data(attrName));					$valueHolder.val($styleTarget.data(attrName));				}				else{					$valueHolder.val($styleTarget.css(attrName));				}												var value = $valueHolder.val();				if(value){					$valueHolder.val($styleTarget.css(attrName));				}				else{					console.log('Retrieving stored for ' + attrName);					console.log('Retrieving stored Val' + $styleTarget.data(attrName));					$valueHolder.val($styleTarget.data(attrName));				}				console.log($valueHolder.val());							}*/					});				}		$('.customizer .apply').click(function(){		var styles = {};		console.log("applying styles");				$('.customizer .options li').each(function(key,attrDetails){						var attrName = $('.attr-name',attrDetails).html();			var $valueHolder= $('.values',attrDetails).children();			var value ='';										if($.inArray(attrName,['id','class'])>-1){				$styleTarget.attr(attrName,$valueHolder.val());			}			else{				if( $valueHolder[0].tagName =="SELECT"){					//If it is a select ,then get the selected value					//console.log($valueHolder.find("option:selected").html());					value=$valueHolder.find("option:selected").html();				}				else{					//If it is a textfield, then get the textfield's value										value = $valueHolder.val();										console.log("value=" +value);					//If its a stored attribute, then we need to store it in the array					if($.inArray(attrName,storedAttributes)>-1){						//console.log("Its a stored attr");						$styleTarget.data(attrName,value);						console.log("Saved Stored attr "+ attrName + ', value : ' + $styleTarget.data(attrName));					}										//console.log($valueHolder.val());				}			}			if(value!=''){				styles[attrName]=value;				//console.log('');			}			//console.log("key : "+ key + " value : "+attrName);		});								var styleAttrValue=''				$.each(styles,function(key,value){			styleAttrValue += key +':' + value +';';			newElementStyles+= key +':' + value +'; <br/>';		});						$styleTarget.attr('style',styleAttrValue);			});			$('.dezyner .add-child-panel').click(function(event){		console.log('asd');				var $parentElement = $styleTarget;				var $childElement = $('<div/>');				//init($childElement);		//console.log('asd');		$.each(cssProperties,function(index,cssProperty){			$childElement.data(cssProperty,'');		});		//console.log('asd');		//Set the margin of the child to 5px and border of 1px		$childElement.data('margin','10%');		$childElement.data('border','1px solid black');		$childElement.data('width','80%');		$childElement.data('height','80%');				$parentElement.append($childElement);				var attr = 'background-color';				console.log("asd : " + $('.header-panel').css(attr));		console.log("asd : " + $childElement.css(attr));		console.log("asd : " + cssProperties[1]);		console.log("asd : " + $childElement.css(cssProperties[1]));				$.each(cssProperties,function(index,cssProperty){			$childElement.css(cssProperty,$childElement.data(cssProperty));		});								//console.log($parentElement.size());		console.log($parentElement.css('overflow'));		if($parentElement.css('overflow')!='auto'){			$parentElement.css('overflow','auto');		}			});			$('.customizer .get-css').click(function(){		$('.css-properties').html(newElementStyles);		$('.css-properties').dialog('open').dialog('option','title','CSS for this div');	});		$('.customize').click(function(){		$(this).parent().hide();		setupCurrentProperties($('.customizer'));		$('.customizer').show();	});				$('.dezyner .selection-panel-1 div').hover(function(){		$(this).addClass('selection');	},	function(){		$(this).removeClass('selection');	});		$('.push').unbind('click').unbind('mouseover').unbind('mouseout');		});